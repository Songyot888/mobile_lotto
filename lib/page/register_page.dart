import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:mobile_lotto/model/request/register_req.dart';
import 'package:mobile_lotto/model/response/register_res_post.dart';

class Register_Page extends StatefulWidget {
  const Register_Page({super.key});

  @override
  State<Register_Page> createState() => _Register_PageState();
}

class _Register_PageState extends State<Register_Page> {
  // ‚úÖ Controllers
  final TextEditingController nameController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController bankController = TextEditingController();
  final TextEditingController accountController = TextEditingController();
  final TextEditingController balanceController = TextEditingController();

  bool _submitting = false; // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥ + ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£

  // ‚úÖ Popup ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏• (‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ)
  void _showResultDialog(String message, {bool success = true}) {
    showDialog(
      context: context,
      barrierDismissible: false, // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ô‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏õ‡∏¥‡∏î
      builder: (context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          backgroundColor: const Color(0xFF00838F), // ‡πÇ‡∏ó‡∏ô‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                success ? Icons.check_circle : Icons.error,
                color: Colors.white,
                size: 40,
              ),
              const SizedBox(height: 12),
              Text(
                message,
                textAlign: TextAlign.center,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 15.5,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        );
      },
    );

    // ‡∏õ‡∏¥‡∏î dialog ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 1.6 ‡∏ß‡∏¥ ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö login
    Future.delayed(const Duration(milliseconds: 1600), () {
      if (!mounted) return;
      Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î dialog
      if (success) {
        Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);
      }
    });
  }

  // ‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• + ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login
  Future<void> registerUser() async {
    if (_submitting) return;
    setState(() => _submitting = true);

    try {
      final req = RegisterRequest(
        fullName: nameController.text.trim(),
        phone: phoneController.text.trim(),
        email: emailController.text.trim(),
        bankName: bankController.text.trim(),
        bankNumber: accountController.text.trim(),
        password: passwordController.text,
        balance: int.tryParse(balanceController.text.trim()) ?? 0,
      );

      final res = await http.post(
        Uri.parse("https://lotto-api-production.up.railway.app/api/Auth/register"),
        headers: {"Content-Type": "application/json; charset=utf-8"},
        body: registerRequestToJson(req),
      );

      log('statusCode: ${res.statusCode}');
      log('body: ${res.body}');

      if (!mounted) return;

      // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (200/201)
      if (res.statusCode == 200 || res.statusCode == 201) {
        // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á parse response
        try {
          final RegisterRespone parsed = registerResponeFromJson(res.body);
          log('registered: ${parsed.fullName}');
        } catch (_) {/* ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ */}
        _showResultDialog("‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", success: true);
        return;
      }

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (‡∏ö‡∏≤‡∏á API ‡πÉ‡∏ä‡πâ 400 ‡∏´‡∏£‡∏∑‡∏≠ 409)
      if (res.statusCode == 400 || res.statusCode == 409) {
        _showResultDialog("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£/‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", success: false);
        return;
      }

      // ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
      _showResultDialog("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${res.statusCode}) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", success: false);
    } catch (e) {
      log('Error $e');
      if (!mounted) return;
      _showResultDialog("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", success: false);
    } finally {
      if (mounted) setState(() => _submitting = false);
    }
  }

  @override
  void dispose() {
    nameController.dispose();
    phoneController.dispose();
    emailController.dispose();
    passwordController.dispose();
    bankController.dispose();
    accountController.dispose();
    balanceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        height: MediaQuery.of(context).size.height,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFF006064), Color(0xFF00838F), Color(0xFF006064)],
            stops: [0.0, 0.5, 1.0],
          ),
        ),
        child: SingleChildScrollView(
          child: Column(
            children: [
              const SizedBox(height: 50),

              // üîπ Logo
              Center(
                child: Stack(
                  clipBehavior: Clip.none,
                  children: [
                    Positioned(
                      left: -5,
                      top: 5,
                      child: Image.asset('assets/lotto-1-removebg-preview 1.png', height: 100),
                    ),
                    Image.asset('assets/lotto888.png', height: 180),
                  ],
                ),
              ),

              const SizedBox(height: 10),
              const Text(
                "‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î",
                style: TextStyle(color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold),
              ),

              const SizedBox(height: 20),

              // üîπ Card Form
              Container(
                margin: const EdgeInsets.all(20),
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.transparent,
                  borderRadius: BorderRadius.circular(20),
                  border: Border.all(color: Color.fromARGB(255, 0, 196, 186), width: 3),
                ),
                child: Column(
                  children: [
                    const Text(
                      "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                    ),
                    const SizedBox(height: 10),

                    // üîπ Input Fields
                    buildTextField("‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", Icons.person, nameController),
                    buildTextField("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", Icons.phone, phoneController),
                    buildTextField("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå", Icons.email, emailController),
                    buildTextField("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", Icons.lock, passwordController, isPassword: true),
                    buildTextField("‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", Icons.account_balance, bankController),
                    buildTextField("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", Icons.account_balance_wallet, accountController),
                    buildTextField("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", Icons.account_balance_wallet, balanceController),

                    const SizedBox(height: 20),

                    // üîπ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _submitting ? null : registerUser,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color.fromARGB(255, 0, 196, 186),
                          padding: const EdgeInsets.symmetric(vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                            side: const BorderSide(color: Color.fromARGB(255, 0, 196, 186), width: 2),
                          ),
                        ),
                        child: Text(
                          _submitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£..." : "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
                          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
                        ),
                      ),
                    ),

                    const SizedBox(height: 20),

                    // üîπ ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _submitting ? null : () => Navigator.pop(context),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          padding: const EdgeInsets.symmetric(vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                            side: const BorderSide(color: Color.fromARGB(255, 0, 162, 177), width: 1.5),
                          ),
                          elevation: 0,
                        ),
                        child: const Text(
                          "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö",
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildTextField(
    String hint,
    IconData icon,
    TextEditingController controller, {
    bool isPassword = false,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      child: TextField(
        controller: controller,
        obscureText: isPassword,
        decoration: InputDecoration(
          filled: true,
          fillColor: Colors.transparent,
          hintText: hint,
          hintStyle: const TextStyle(color: Colors.white70),
          prefixIcon: Icon(icon, color: Colors.white),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: const BorderSide(color: Color.fromARGB(255, 0, 162, 177), width: 1.5),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: const BorderSide(color: Colors.white, width: 2),
          ),
        ),
        style: const TextStyle(color: Colors.white),
        keyboardType: isPassword
            ? TextInputType.text
            : (hint.contains('‡πÇ‡∏ó‡∏£') || hint.toLowerCase().contains('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô') || hint.contains('‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'))
                ? TextInputType.number
                : TextInputType.text,
      ),
    );
  }
}
